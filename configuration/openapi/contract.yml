openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: http://localhost:8080

info:
  description: This is a simple API
  version: 1.0.0
  title: Simple Inventory API
  # put the contact info for your development or API team
  contact:
    email: rugal.bernstein.0@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
#  ----------------------------------------------------------

# tags are used for organizing operations
tags:
- name: post
  description: 
- name: torrent
  description: 
- name: user
  description: 

#  ----------------------------------------------------------

components:
  schemas:
    #  --------------------------------page
    Page:
      type: object
      properties:
        size:
          type: integer
          description: size of each page
          default: 20
        index:
          type: integer
          description: 0 based index of page
          default: 0
          minimum: 0
        total:
          type: integer
          description: number of total page
          minimum: 1
    #  --------------------------------post
    NewPost:
      type: object
      properties:
        title:
          type: string
          example: This is title
        content:
          type: string
          example:  ~~This is Content in markdown format~~
    Post:
      allOf:
        - $ref: '#/components/schemas/NewPost'
        - type: object
          properties:
            pid:
              description: Id of post
              type: integer
              example: 1
            hash:
              type: string
              description: Hash of the torrent file
          required:
            - pid
    PostPage:
      allOf:
        - $ref: '#/components/schemas/Page'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Post'
    #  --------------------------------user
    NewUser:
      type: object
      properties:
        email:
          type: string
          description: email has to be unique
          example: test@email.com
        password:
          type: string
          example:  plain.text.password
      required:
        - username
        - password
    User:
      type: object
      properties:
        uid:
          description: Id of user
          type: integer
          example: 1
        username:
          description: username has to be unique
          type: string
          example: rugal.bernstein
        email:
          type: string
          description: email has to be unique
          example: test@email.com
        download:
          type: integer
          format: int64
          description: downloaded byte
        upload:
          type: integer
          format: int64
          description: uploaded byte
        credit:
          description: user credit/score
          type: integer
          example: 1
      required:
        - pid
        - username
        - email
        - download
        - upload
        - credit
    #  --------------------------------basic
    Response204:
      description:  Resource deleted
    Response400:
      description:  Bad request
    Response401:
      description:  Request not authenticated
    Response403:
      description:  Request not authorized
    Response404:
      description:  Resource not found
    Response405:
      description:  Request method not found
    Response406:
      description:  Response representation not negotiable
    Response409:
      description:  Resource conflicted

#  ----------------------------------------------------------

paths:
#  --------------------------------post
  /post/{pid}/torrent:
    parameters:
      - in: path
        name: pid
        description: Post Id
        required: true
        schema:
          type: integer
      - in: header
        name: uid
        description: User id
        required: true
        schema:
          type: integer
      - in: header
        name: password
        description: User password
        required: true
        schema:
          type: string
    post:
      tags:
        - post
        - torrent
      summary: Upload torrent for post
      operationId: upload
      description: Upload torrent file for post by multipart. Will update `hash` field.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                # name it by `file` as the codegen generate no other than `file`
                # this may be a bug of openapi codegen but let do it for now
                file:      
                  type: string
                  format: binary

      responses:
        201:
          description: Torrent file uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          $ref: '#/components/schemas/Response400'
        401:
          $ref: '#/components/schemas/Response401'
        403:
          $ref: '#/components/schemas/Response403'
        405:
          $ref: '#/components/schemas/Response405'
        406:
          $ref: '#/components/schemas/Response406'
        409:
          $ref: '#/components/schemas/Response409'
    get:
      tags:
        - post
        - torrent
      summary: Download torrent for post
      operationId: download
      description: Download torrent file for post by multipart.
      
      responses:
        200:
          description: Torrent got
          content:
            application/x-bittorrent:
              schema:
                type: string
                format: binary
        401:
          $ref: '#/components/schemas/Response401'
        403:
          $ref: '#/components/schemas/Response403'
        404:
          $ref: '#/components/schemas/Response404'
        405:
          $ref: '#/components/schemas/Response405'
        406:
          $ref: '#/components/schemas/Response406'
  /post/{pid}:
    parameters:
      - in: path
        name: pid
        description: Post Id
        required: true
        schema:
          type: integer
      - in: header
        name: uid
        description: User id
        required: true
        schema:
          type: integer
      - in: header
        name: password
        description: User password
        required: true
        schema:
          type: string
    put:
      tags:
        - post
      summary: Update post basic information
      operationId: update
      description: |
        Update post by posting JSON.
      requestBody:
        description: Post to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'

      responses:
        200:
          description: Post updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          $ref: '#/components/schemas/Response400'
        401:
          $ref: '#/components/schemas/Response401'
        403:
          $ref: '#/components/schemas/Response403'
        404:
          $ref: '#/components/schemas/Response404'
        405:
          $ref: '#/components/schemas/Response405'
        406:
          $ref: '#/components/schemas/Response406'
    delete:
      tags:
        - post
      summary: Delete post
      operationId: delete
      responses:
        204:
          $ref: '#/components/schemas/Response204'
        401:
          $ref: '#/components/schemas/Response401'
        403:
          $ref: '#/components/schemas/Response403'
        404:
          $ref: '#/components/schemas/Response404'
        405:
          $ref: '#/components/schemas/Response405'
        406:
          $ref: '#/components/schemas/Response406'
  /post:
    parameters:
      - in: header
        name: uid
        description: User id
        required: true
        schema:
          type: integer
      - in: header
        name: password
        description: User password
        required: true
        schema:
          type: string
    post:
      tags:
        - post
      summary: Create post
      operationId: create
      description: Create post by posting JSON. Does `not` include torrent and hash.
      requestBody:
        description: Basic post object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        201:
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          $ref: '#/components/schemas/Response400'
        401:
          $ref: '#/components/schemas/Response401'
        403:
          $ref: '#/components/schemas/Response403'
        405:
          $ref: '#/components/schemas/Response405'
        406:
          $ref: '#/components/schemas/Response406'
        409:
          $ref: '#/components/schemas/Response409'
    get:
      parameters:
        - in: query
          name: size
          description: size of each page
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
        - in: query
          name: index
          description: 0 based page index
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
      tags:
        - post
      summary: Get posts by page
      operationId: getByPage
      description: Get posts by specifying page request
      responses:
        200:
          description: Post got
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostPage'
        400:
          $ref: '#/components/schemas/Response400'
        401:
          $ref: '#/components/schemas/Response401'
        403:
          $ref: '#/components/schemas/Response403'
        405:
          $ref: '#/components/schemas/Response405'
        406:
          $ref: '#/components/schemas/Response406'
        409:
          $ref: '#/components/schemas/Response409'
#  --------------------------------user
  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: create
      description: Create user by posting JSON.
      requestBody:
        description: Basic user object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/schemas/Response400'
        401:
          $ref: '#/components/schemas/Response401'
        403:
          $ref: '#/components/schemas/Response403'
        405:
          $ref: '#/components/schemas/Response405'
        406:
          $ref: '#/components/schemas/Response406'
        409:
          $ref: '#/components/schemas/Response409'
  /user/{uid}/token:
    post:
      parameters:
      - in: path
        name: uid
        description: User id
        required: true
        schema:
          type: integer
      - in: header
        name: password
        description: User password in plain text, do not encrypt
        required: true
        schema:
          type: string
      tags:
        - user
      summary: Create Json Web Token for user login
      operationId: login
      description: Create Json Web Token for user login, so the user credential will only expose once
      responses:
        201:
          description: Json Web Token created
          content:
            text/plain:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        400:
          $ref: '#/components/schemas/Response400'
        401:
          $ref: '#/components/schemas/Response401'
        403:
          $ref: '#/components/schemas/Response403'
        405:
          $ref: '#/components/schemas/Response405'
        406:
          $ref: '#/components/schemas/Response406'
        409:
          $ref: '#/components/schemas/Response409'
#  --------------------------------
#  ----------------------------------------------------------
